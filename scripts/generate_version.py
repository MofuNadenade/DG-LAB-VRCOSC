#!/usr/bin/env python3
"""
Dynamic version generation script for DG-LAB-VRCOSC
Generates version.py based on git tags, commits, and build environment
"""

import sys
import subprocess
import datetime
import argparse
from pathlib import Path


def run_git_command(command: str) -> str:
    """Run a git command and return the output"""
    try:
        result = subprocess.run(
            command.split(), 
            capture_output=True, 
            text=True, 
            cwd=Path(__file__).parent.parent,
            timeout=10
        )
        if result.returncode == 0:
            return result.stdout.strip()
        return ""
    except (subprocess.TimeoutExpired, subprocess.SubprocessError, FileNotFoundError):
        return ""


def get_git_version() -> str:
    """Generate version string based on git state"""
    # Check if current commit has a tag
    current_tag = run_git_command("git describe --tags --exact-match")
    if current_tag:
        print(f"Using exact tag: {current_tag}")
        return current_tag
    
    # Get latest tag
    latest_tag = run_git_command("git describe --tags --abbrev=0")
    commit_hash = run_git_command("git rev-parse --short HEAD")
    timestamp = datetime.datetime.now().strftime("%Y%m%d-%H%M")
    
    if latest_tag and commit_hash:
        version = f"{latest_tag}-{timestamp}-{commit_hash}"
        print(f"Using tag-based version: {version}")
        return version
    
    # Fallback to commit-based version
    if commit_hash:
        version = f"v0.0.0-{timestamp}-{commit_hash}"
        print(f"Using commit-based version: {version}")
        return version
    
    # Final fallback
    version = f"v0.0.0-{timestamp}-dev"
    print(f"Using fallback version: {version}")
    return version


def get_build_info() -> dict:
    """Get additional build information"""
    commit_hash = run_git_command("git rev-parse HEAD")
    commit_short = run_git_command("git rev-parse --short HEAD")
    branch = run_git_command("git branch --show-current")
    commit_date = run_git_command("git log -1 --format=%ci")
    build_time = datetime.datetime.now().isoformat()
    
    return {
        "commit_hash": commit_hash,
        "commit_short": commit_short,
        "branch": branch,
        "commit_date": commit_date,
        "build_time": build_time,
        "python_version": sys.version,
        "platform": sys.platform
    }


def generate_version_file(output_file: Path, version: str, build_info: dict) -> None:
    """Generate the version.py file"""
    content = f'''"""
Version information for DG-LAB-VRCOSC
Auto-generated by scripts/generate_version.py
Do not edit this file manually!
"""

from typing import Dict

VERSION = "{version}"
VERSION_SHORT = "{version.split('-')[0]}"

BUILD_INFO = {{
    "version": "{version}",
    "commit_hash": "{build_info['commit_hash']}",
    "commit_short": "{build_info['commit_short']}",
    "branch": "{build_info['branch']}",
    "commit_date": "{build_info['commit_date']}",
    "build_time": "{build_info['build_time']}",
    "python_version": "{build_info['python_version']}",
    "platform": "{build_info['platform']}"
}}

def get_version() -> str:
    """Get the application version"""
    return VERSION

def get_version_short() -> str:
    """Get the short version (tag only)"""
    return VERSION_SHORT

def get_build_info() -> Dict[str, str]:
    """Get detailed build information"""
    return BUILD_INFO.copy()

def print_version_info() -> None:
    """Print version information for debugging"""
    print(f"DG-LAB-VRCOSC Version: {{VERSION}}")
    print(f"Commit: {{BUILD_INFO['commit_short']}} ({{BUILD_INFO['branch']}})")
    print(f"Built: {{BUILD_INFO['build_time']}}")

if __name__ == "__main__":
    print_version_info()
'''
    
    # Ensure output directory exists
    output_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"Generated version file: {output_file}")


def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="Generate version.py for DG-LAB-VRCOSC")
    parser.add_argument(
        "--output", 
        "-o", 
        default="src/version.py",
        help="Output file path (default: src/version.py)"
    )
    parser.add_argument(
        "--check",
        action="store_true",
        help="Just check and print version without generating file"
    )
    
    args = parser.parse_args()
    
    # Get project root directory
    project_root = Path(__file__).parent.parent
    output_file = project_root / args.output
    
    # Generate version and build info
    version = get_git_version()
    build_info = get_build_info()
    
    if args.check:
        print(f"Version: {version}")
        print(f"Commit: {build_info['commit_short']}")
        print(f"Branch: {build_info['branch']}")
        return
    
    # Generate version file
    generate_version_file(output_file, version, build_info)
    print(f"Version {version} written to {output_file}")


if __name__ == "__main__":
    main()