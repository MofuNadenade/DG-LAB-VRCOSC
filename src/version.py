"""
Version information for DG-LAB-VRCOSC
Auto-generated by scripts/generate_version.py
Do not edit this file manually!
"""

import logging
from typing import Dict

logger = logging.getLogger(__name__)

VERSION = "v0.2.11"
VERSION_SHORT = "v0.2.11"

BUILD_INFO = {
    "version": "v0.2.11",
    "commit_hash": "bb0944267843cf23420678f4e7938bfb78618bf0",
    "commit_short": "bb09442",
    "branch": "master",
    "commit_date": "2025-09-21 17:59:50 +0800",
    "build_time": "2025-09-21T17:59:56.539720",
    "python_version": "3.13.7 (tags/v3.13.7:bcee1c3, Aug 14 2025, 14:15:11) [MSC v.1944 64 bit (AMD64)]",
    "platform": "win32"
}

def get_version() -> str:
    """Get the application version"""
    return VERSION

def get_version_short() -> str:
    """Get the short version (tag only)"""
    return VERSION_SHORT

def get_build_info() -> Dict[str, str]:
    """Get detailed build information"""
    return BUILD_INFO.copy()

def _format_version_lines() -> tuple[str, str, str]:
    """Format version information lines"""
    return (
        f"DG-LAB-VRCOSC Version: {VERSION}",
        f"Commit: {BUILD_INFO['commit_short']} ({BUILD_INFO['branch']})",
        f"Built: {BUILD_INFO['build_time']}"
    )

def print_version_info() -> None:
    """Print version information for debugging"""
    for line in _format_version_lines():
        print(line)

def log_version_info() -> None:
    """Log version information using logger"""
    for line in _format_version_lines():
        logger.info(line)

if __name__ == "__main__":
    # For command line usage, still use print for direct output
    print_version_info()
